---
import Layout from '../layouts/Layout.astro';
import ProjectCard from '../components/ProjectCard.astro';
// @ts-ignore
import projectsData from '../../public/projects.json';

interface Project {
  title: string;
  description: string;
  url: string;
  demo?: string;
  post?: string;
  date: string;
  license?: string;
  // Removed author and tags as they are not in the JSON
}

// Add originalIndex to each project before sorting
const projectsWithOriginalIndex = projectsData.map((project, index) => ({
  ...project,
  originalIndex: index,
}));

// Sort all projects:
// 1. Primary: by date year (descending, newest first).
// 2. Secondary: by original array order (ascending) if years are the same.
const sortedProjects = projectsWithOriginalIndex.sort((a, b) => {
  // Since date is guaranteed to be a year string,
  // new Date().getTime() will produce valid timestamps.
  const timeA = new Date(a.date).getTime();
  const timeB = new Date(b.date).getTime(); 

  // If years (and thus timestamps) are different, sort by year (descending)
  if (timeA !== timeB) {
    return timeB - timeA;
  }

  // Years are the same, sort by originalIndex (ascending)
  // to maintain original relative order.
  return a.originalIndex - b.originalIndex;
});
---

<Layout>
  <section class="not-prose px-4 max-w-7xl mx-auto">
    <h1 class="mb-6 text-3xl md:text-4xl font-semibold tracking-tight mt-12">Projects</h1>
    
    <ul class="grid gap-6 grid-cols-1 lg:grid-cols-2 w-full">
      {sortedProjects.map(project => (
        <ProjectCard {...project} />
      ))}
    </ul>
  </section>
</Layout>