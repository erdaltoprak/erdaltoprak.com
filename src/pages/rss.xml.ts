import rss from '@astrojs/rss';
import { getCollection } from 'astro:content';
import sanitizeHtml from 'sanitize-html';
import MarkdownIt from 'markdown-it';
const parser = new MarkdownIt();

interface Context {
  site: string;
}

interface Post {
  slug: string;
  body: string;
  data: Record<string, any>;
  collection: string;
}

export async function GET(context: Context) {
    const site_url = context.site;
    // @ts-ignore - new collections will be generated by Astro content collections
    const articles = await getCollection('articles');
    // @ts-ignore
    const notes = await getCollection('notes');

    const allPosts: Post[] = [
      ...articles.map(p => ({ ...p, collection: 'articles' })),
      ...notes.map(p => ({ ...p, collection: 'notes' }))
    ].sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

    return rss({
      title: 'Erdal Toprak â€“ All content',
      description: 'Latest articles and notes',
      site: site_url,
      stylesheet: '/rss/styles.xsl',
      items: allPosts.map((post) => {
        const post_content = sanitizeHtml(
          parser.render(post.body),
          {
            allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img']),
            transformTags: {
              'img': (tagName, attribs) => {
                if (attribs.src && attribs.src.startsWith('./')) {
                  attribs.src = `${site_url}/${post.collection}/${post.slug}/${attribs.src.substring(2)}`;
                }
                return { tagName, attribs };
              }
            }
          }
        );
        return {
          ...post.data,
          author: 'rss@erdaltoprak.com',
          link: `/${post.collection}/${post.slug}/`,
          content: post_content,
          pubDate: new Date(post.data.pubDate),
        };
      }),
      customData: `<atom:link href="${site_url}/rss.xml" rel="self" type="application/rss+xml" xmlns:atom="http://www.w3.org/2005/Atom"/>`,
    });
  }