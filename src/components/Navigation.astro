---
import { NAVBAR_ITEMS } from '../consts';
import ThemeToggle from './ThemeToggle.astro';
import SearchButton from './SearchButton.astro';
import { Image } from 'astro:assets';
import memoji from '../../public/memoji.png';
import { Icon } from 'astro-icon/components'

// Get current path and normalize it
const currentPath = Astro.url.pathname.replace(/\/$/, '');
---

<nav class="sticky top-0 bg-orange-100/80 dark:bg-neutral-900/80 backdrop-blur-sm border-b border-zinc-200 dark:border-zinc-800 z-50 ">
    <div class="max-w-4xl mx-auto px-4 py-2 flex items-center gap-4">
        <a href="/" class="flex items-center space-x-1 hover:underline underline-offset-4 decoration-2">
            <Image
                src={memoji}
                alt="Profile photo"
                class="w-6 h-6 rounded-full"
            />
            <span class="text-lg font-bold hidden sm:block">Erdal Toprak</span>
        </a>
        <!-- Desktop links -->
        <div class="hidden sm:flex items-center space-x-1 ml-auto">
            {NAVBAR_ITEMS.map((item) => (
                <a 
                    href={item.href}
                    class={`px-3 py-1.5 rounded-lg ${
                        currentPath === item.href.replace(/\/$/, '') 
                            ? 'bg-orange-50 dark:bg-neutral-900' 
                            : 'hover:bg-orange-50 dark:hover:bg-zinc-800'
                    }`}
                >
                    {item.name}
                </a>
            ))}
        </div>

        <!-- Icon cluster -->
        <div class="flex items-center space-x-3 ml-auto sm:ml-0">
            <ThemeToggle />
            <SearchButton />
            <button id="menu-button" aria-label="Menu" class="p-2 rounded sm:hover:bg-orange-50 sm:dark:hover:bg-zinc-800 focus:outline-none focus-visible:outline-none active:bg-orange-50 active:dark:bg-zinc-800 sm:hidden">
                <Icon name="mdi:menu" class="w-6 h-6" />
            </button>
        </div>
    </div>
</nav>

<!-- Mobile Menu Dropdown -->
<div id="mobile-menu" class="hidden fixed top-14 right-4 w-44 bg-orange-100 dark:bg-neutral-900 shadow-xl rounded-lg z-50 sm:hidden">
  <div class="flex flex-col py-2">
    {NAVBAR_ITEMS.map((item) => (
      <a href={item.href} class="px-4 py-2 hover:bg-orange-50 dark:hover:bg-zinc-800 text-zinc-900 dark:text-zinc-100 rounded">
        {item.name}
      </a>
    ))}
  </div>
</div>

<script>
  const menuBtn = document.getElementById('menu-button');
  const menu = document.getElementById('mobile-menu');
  let isMenuOpen = false;

  function closeMenu() {
    if (!isMenuOpen) return;
    
    isMenuOpen = false;
    menu?.classList.add('hidden');
    menuBtn?.classList.remove('bg-orange-50', 'dark:bg-zinc-800', 'menu-active');
    
    // Force blur and clear any lingering focus/active states
    if (menuBtn) {
      menuBtn.blur();
      // Remove any focus/active states by triggering a reflow
      menuBtn.style.cssText = menuBtn.style.cssText;
    }
  }

  function openMenu() {
    isMenuOpen = true;
    menu?.classList.remove('hidden');
    menuBtn?.classList.add('bg-orange-50', 'dark:bg-zinc-800', 'menu-active');
  }

  menuBtn?.addEventListener('click', (e) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (isMenuOpen) {
      closeMenu();
    } else {
      openMenu();
    }
  });

  // Close on outside click
  document.addEventListener('click', (e) => {
    if (isMenuOpen && !menu?.contains(e.target) && !menuBtn?.contains(e.target)) {
      closeMenu();
    }
  });

  // Close on scroll
  window.addEventListener('scroll', () => {
    if (isMenuOpen) {
      closeMenu();
    }
  });

  // Handle page navigation
  window.addEventListener('beforeunload', closeMenu);
</script>

<style>
  /* Ensure no focus states persist on the menu button */
  #menu-button:focus,
  #menu-button:focus-visible,
  #menu-button:active {
    outline: none !important;
  }
  
  /* Only show background when explicitly marked as active */
  #menu-button:not(.menu-active):focus,
  #menu-button:not(.menu-active):focus-visible,
  #menu-button:not(.menu-active):active {
    background-color: transparent !important;
  }
</style>
